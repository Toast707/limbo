// Unclear father: is Jesu father God or Joseph?
// Maybe the test is a bit unfortunate.

Sort ENTITY
Sort BOOL

Variable x -> ENTITY
Variable y -> ENTITY

Name Jesus/0 -> ENTITY
Name Mary/0 -> ENTITY
Name Joe/0 -> ENTITY
Name HolyGhost/0 -> ENTITY
Name God/0 -> ENTITY
Name True/0 -> BOOL

Function fatherOf/1 -> ENTITY
Function motherOf/1 -> ENTITY
Function is_mortal/1 -> BOOL

KB: Mary == motherOf(Jesus)
KB: HolyGhost == fatherOf(Jesus) || God == fatherOf(Jesus) || Joe == fatherOf(Jesus)
KB: is_mortal(Mary) == True
KB: is_mortal(Joe) == True
KB: fatherOf(Jesus) != Joe -> is_mortal(fatherOf(Jesus)) != True
// An alternative way to state the previous clause:
// KB: (fatherOf(Jesus) != x || x == Joe || is_mortal(x) != True

Let phi := HolyGhost == fatherOf(Jesus) || God == fatherOf(Jesus) || Joe == fatherOf(Jesus)
Assert: Know<0> phi

Let phi := Ex x (x == fatherOf(Jesus))
Refute: Know<0> phi
Assert: Know<1> phi

Let phi := HolyGhost == fatherOf(Jesus)
Refute: Cons<0> phi
Assert: Cons<1> phi

Let phi := HolyGhost == fatherOf(Jesus) && God == fatherOf(Jesus) || Joe == fatherOf(Jesus)
Refute: Know<0> phi

Let phi := motherOf(Jesus) == fatherOf(Jesus)
Refute: Know<0> phi
Refute: Cons<0> phi
Assert: Know<0> !phi
Refute: Cons<0> !phi
Assert: Cons<1> !phi

Assert: Know<0> is_mortal(motherOf(Jesus)) == True

Let phi := is_mortal(fatherOf(Jesus)) == True
Assert: Cons<1> phi
Assert: Cons<1> !phi

Assert: Know<1> Ex x is_mortal(x) == True
Refute: Know<1> Fa x is_mortal(x) == True

