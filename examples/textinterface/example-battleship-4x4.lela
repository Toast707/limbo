// A 4x4-battleship game with a 3-ship and a 2-ship.
// The output of the game is very limited; sorry for that.

Call: disable_query_logging()

Sort BOOL
Name T/0 -> BOOL

Sort POS
Name p00/0, p10/0, p20/0, p30/0, p40/0, p50/0,
     p01/0, p11/0, p21/0, p31/0, p41/0, p51/0,
     p02/0, p12/0, p22/0, p32/0, p42/0, p52/0,
     p03/0, p13/0, p23/0, p33/0, p43/0, p53/0,
     p04/0, p14/0, p24/0, p34/0, p44/0, p54/0,
     p05/0, p15/0, p25/0, p35/0, p45/0, p55/0 -> POS
Var p, q -> POS
Fun field/1 -> BOOL
Fun n/1, e/1, s/1, w/1, ne/1, se/1, sw/1, nw/1 -> POS

KB: p=p11 v p=p21 v p=p31 v p=p41 v
    p=p12 v p=p22 v p=p32 v p=p42 v
    p=p13 v p=p23 v p=p33 v p=p43 v
    p=p14 v p=p24 v p=p34 v p=p44 v ~field(p)=T

KB: field(p11)=T KB: field(p21)=T KB: field(p31)=T KB: field(p41)=T
KB: field(p12)=T KB: field(p22)=T KB: field(p32)=T KB: field(p42)=T
KB: field(p13)=T KB: field(p23)=T KB: field(p33)=T KB: field(p43)=T
KB: field(p14)=T KB: field(p24)=T KB: field(p34)=T KB: field(p44)=T

KB: n(p01)=p00 KB: n(p11)=p10 KB: n(p21)=p20 KB: n(p31)=p30 KB: n(p41)=p40 KB: n(p51)=p50 
KB: n(p02)=p01 KB: n(p12)=p11 KB: n(p22)=p21 KB: n(p32)=p31 KB: n(p42)=p41 KB: n(p52)=p51 
KB: n(p03)=p02 KB: n(p13)=p12 KB: n(p23)=p22 KB: n(p33)=p32 KB: n(p43)=p42 KB: n(p53)=p52 
KB: n(p04)=p03 KB: n(p14)=p13 KB: n(p24)=p23 KB: n(p34)=p33 KB: n(p44)=p43 KB: n(p54)=p53 
KB: n(p05)=p04 KB: n(p15)=p14 KB: n(p25)=p24 KB: n(p35)=p34 KB: n(p45)=p44 KB: n(p55)=p54 

KB: e(p00)=p10 KB: e(p10)=p20 KB: e(p20)=p30 KB: e(p30)=p40 KB: e(p40)=p50 
KB: e(p01)=p11 KB: e(p11)=p21 KB: e(p21)=p31 KB: e(p31)=p41 KB: e(p41)=p51 
KB: e(p02)=p12 KB: e(p12)=p22 KB: e(p22)=p32 KB: e(p32)=p42 KB: e(p42)=p52 
KB: e(p03)=p13 KB: e(p13)=p23 KB: e(p23)=p33 KB: e(p33)=p43 KB: e(p43)=p53 
KB: e(p04)=p14 KB: e(p14)=p24 KB: e(p24)=p34 KB: e(p34)=p44 KB: e(p44)=p54 
KB: e(p05)=p15 KB: e(p15)=p25 KB: e(p25)=p35 KB: e(p35)=p45 KB: e(p45)=p55 

KB: s(p00)=p01 KB: s(p10)=p11 KB: s(p20)=p21 KB: s(p30)=p31 KB: s(p40)=p41 KB: s(p50)=p51 
KB: s(p01)=p02 KB: s(p11)=p12 KB: s(p21)=p22 KB: s(p31)=p32 KB: s(p41)=p42 KB: s(p51)=p52 
KB: s(p02)=p03 KB: s(p12)=p13 KB: s(p22)=p23 KB: s(p32)=p33 KB: s(p42)=p43 KB: s(p52)=p53 
KB: s(p03)=p04 KB: s(p13)=p14 KB: s(p23)=p24 KB: s(p33)=p34 KB: s(p43)=p44 KB: s(p53)=p54 
KB: s(p04)=p05 KB: s(p14)=p15 KB: s(p24)=p25 KB: s(p34)=p35 KB: s(p44)=p45 KB: s(p54)=p55 

KB: w(p10)=p00 KB: w(p20)=p10 KB: w(p30)=p20 KB: w(p40)=p30 KB: w(p50)=p40 
KB: w(p11)=p01 KB: w(p21)=p11 KB: w(p31)=p21 KB: w(p41)=p31 KB: w(p51)=p41 
KB: w(p12)=p02 KB: w(p22)=p12 KB: w(p32)=p22 KB: w(p42)=p32 KB: w(p52)=p42 
KB: w(p13)=p03 KB: w(p23)=p13 KB: w(p33)=p23 KB: w(p43)=p33 KB: w(p53)=p43 
KB: w(p14)=p04 KB: w(p24)=p14 KB: w(p34)=p24 KB: w(p44)=p34 KB: w(p54)=p44 
KB: w(p15)=p05 KB: w(p25)=p15 KB: w(p35)=p25 KB: w(p45)=p35 KB: w(p55)=p45 

KB: ne(p01)=p10 KB: ne(p11)=p20 KB: ne(p21)=p30 KB: ne(p31)=p40 KB: ne(p41)=p50 
KB: ne(p02)=p11 KB: ne(p12)=p21 KB: ne(p22)=p31 KB: ne(p32)=p41 KB: ne(p42)=p51 
KB: ne(p03)=p12 KB: ne(p13)=p22 KB: ne(p23)=p32 KB: ne(p33)=p42 KB: ne(p43)=p52 
KB: ne(p04)=p13 KB: ne(p14)=p23 KB: ne(p24)=p33 KB: ne(p34)=p43 KB: ne(p44)=p53 
KB: ne(p05)=p14 KB: ne(p15)=p24 KB: ne(p25)=p34 KB: ne(p35)=p44 KB: ne(p45)=p54 

KB: se(p00)=p11 KB: se(p10)=p21 KB: se(p20)=p31 KB: se(p30)=p41 KB: se(p40)=p51 
KB: se(p01)=p12 KB: se(p11)=p22 KB: se(p21)=p32 KB: se(p31)=p42 KB: se(p41)=p52 
KB: se(p02)=p13 KB: se(p12)=p23 KB: se(p22)=p33 KB: se(p32)=p43 KB: se(p42)=p53 
KB: se(p03)=p14 KB: se(p13)=p24 KB: se(p23)=p34 KB: se(p33)=p44 KB: se(p43)=p54 
KB: se(p04)=p15 KB: se(p14)=p25 KB: se(p24)=p35 KB: se(p34)=p45 KB: se(p44)=p55 

KB: sw(p10)=p01 KB: sw(p20)=p11 KB: sw(p30)=p21 KB: sw(p40)=p31 KB: sw(p50)=p41 
KB: sw(p11)=p02 KB: sw(p21)=p12 KB: sw(p31)=p22 KB: sw(p41)=p32 KB: sw(p51)=p42 
KB: sw(p12)=p03 KB: sw(p22)=p13 KB: sw(p32)=p23 KB: sw(p42)=p33 KB: sw(p52)=p43 
KB: sw(p13)=p04 KB: sw(p23)=p14 KB: sw(p33)=p24 KB: sw(p43)=p34 KB: sw(p53)=p44 
KB: sw(p14)=p05 KB: sw(p24)=p15 KB: sw(p34)=p25 KB: sw(p44)=p35 KB: sw(p54)=p45 

KB: nw(p11)=p00 KB: nw(p21)=p10 KB: nw(p31)=p20 KB: nw(p41)=p30 KB: nw(p51)=p40 
KB: nw(p12)=p01 KB: nw(p22)=p11 KB: nw(p32)=p21 KB: nw(p42)=p31 KB: nw(p52)=p41 
KB: nw(p13)=p02 KB: nw(p23)=p12 KB: nw(p33)=p22 KB: nw(p43)=p32 KB: nw(p53)=p42 
KB: nw(p14)=p03 KB: nw(p24)=p13 KB: nw(p34)=p23 KB: nw(p44)=p33 KB: nw(p54)=p43 
KB: nw(p15)=p04 KB: nw(p25)=p14 KB: nw(p35)=p24 KB: nw(p45)=p34 KB: nw(p55)=p44 

Sort SHIP
Var x, y -> SHIP
Name two/0, three/0 -> SHIP
Fun head/1 -> POS
Fun body/1 -> POS
Fun tail/1 -> POS

Fun ship/1 -> BOOL
Fun part/2 -> BOOL
Fun water/1 -> BOOL
Fun fired/1 -> BOOL

//KB: ship(two)=T
//KB: ship(three)=T
//KB: x=two v ~x=three v ~ship(x)=T
//
//KB: part(two,head(two))=T
//KB: part(two,tail(two))=T
//KB: x=head(two) v x=tail(two) v ~part(two,x)=T
//
//KB: part(three,head(three))=T
//KB: part(three,body(three))=T
//KB: part(three,tail(three))=T
//KB: x=head(three) v x=body(three) v x=tail(three) v ~part(three,x)=T

KB: s(head(two))=body(two)
KB: n(tail(two))=head(two)
KB: s(head(three))=body(three)
KB: n(body(three))=head(three)
KB: s(body(three))=tail(three)
KB: n(tail(three))=body(three)

KB: ~water(head(two))=T
KB: ~water(tail(two))=T

KB: ~water(head(three))=T
KB: ~water(body(three))=T
KB: ~water(tail(three))=T

KB: water(n(head(two)))=T
KB: water(ne(head(two)))=T
KB: water(nw(head(two)))=T

KB: water(s(tail(two)))=T
KB: water(se(tail(two)))=T
KB: water(sw(tail(two)))=T

KB: water(n(head(three)))=T
KB: water(ne(head(three)))=T
KB: water(nw(head(three)))=T

KB: water(e(body(three)))=T
KB: water(w(body(three)))=T

KB: water(s(tail(three)))=T
KB: water(se(tail(three)))=T
KB: water(sw(tail(three)))=T

KB: p=p11 v p=p21 v p=p31 v p=p41 v
    p=p12 v p=p22 v p=p32 v p=p42 v
    p=p13 v p=p23 v p=p33 v p=p43 v
    p=p14 v p=p24 v p=p34 v p=p44 v
    water(p)=T
// Is the next needed? Cf. 1x4.
KB: head(two)=p v tail(two)=p v head(three)=p v body(three)=p v tail(three)=p v water(p)=T

Call: bs_init(p11, p12, p13, p14,
              p21, p22, p23, p24,
              p31, p32, p33, p34,
              p41, p42, p43, p44)


// while Ex p (~K<1> water(p)=T ^ ~K<1> ~water(p)=T) {
//     for P -> POS
//         ~K<0> fired(P)=T ^ K<1> ~water(P)=T {
//         Call: bs_fire(P)
//         Call: print(P)
//     }
// 
// //    } else if Ex p (K<1> ~fired(p)=T ^ ~K<1> ~water(p)=T ^ M<1> water(p)=T) {
// //        for P in p1, p2, p3, p4 {
// //            if ~K<0> fired(P)=T ^ ~K<1> ~water(P)=T ^ M<1> water(P)=T {
// //                Call: bs_fire(P)
// //                Call: print(P)
// //            }
// //        }
// 
//     if Ex p (~K<1> water(p)=T ^ ~K<1> ~water(p)=T) {
//         if ~K<0> fired(p1)=T {
//             Call: bs_fire(p1)
//         } else if ~K<0> fired(p2)=T {
//             Call: bs_fire(p2)
//         } else if ~K<0> fired(p3)=T {
//             Call: bs_fire(p3)
//         } else if ~K<0> fired(p4)=T {
//             Call: bs_fire(p4)
//         }
//     }
//     Call: bs_print()
// }

while Ex p (~K<0> fired(p)=T ^ ~K<2> water(p)=T) {
    for P in p11, p12, p13, p14,
             p21, p22, p23, p24,
             p31, p32, p33, p34,
             p41, p42, p43, p44 -> POS    ~K<0> fired(P)=T ^ K<2> ~water(P)=T {
        Call: bs_fire(P)
        Call: print(P)
    } else if P in p11, p12, p13, p14,
                   p21, p22, p23, p24,
                   p31, p32, p33, p34,
                   p41, p42, p43, p44 -> POS   (~K<0> fired(P)=T ^ ~K<2> water(P)=T ^ ~K<2> ~water(P)=T) {
        Call: bs_fire(P)
        Call: print(P,P)
    }
    Call: bs_print()
}

