// A simple Sudoku agent. A few example Sodukos are defined below; you can
// set the value of the 'game' constant accordingly.
// The output of the game is very limited; sorry for that.

Call: disable_query_logging()

Sort NAME
Name n1/0, n2/0, n3/0, n4/0, n5/0, n6/0, n7/0, n8/0, n9/0 -> NAME
Var n, x, y -> NAME

// val(x,y)=n is the number at a coordinate.
Fun val/2 -> NAME

Let true := n1=n1
Let false := ~true

// The following constraints encode the rules of Sudoku:
// 1. In every
//     - row,
//     - column,
//     - 3x3 box
//    no value may occur twice, i.e., if (X,Y) and (X',Y') are cells of the
//    same row, column, or box, then val(X,Y) and val(X',Y') must be distinct.
// 2. The value of every cell must be one of {n1,...,n9}.
for X in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  true
    for Y in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  true
        for Y' in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  Y/=Y'
            KB: ~val(X,Y)=val(X,Y')
for Y in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  true
    for X in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  true
        for X' in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  X/=X'
            KB: ~val(X,Y)=val(X',Y)
for X in n1,n2,n3 -> NAME  true {
    for X' in n1,n2,n3 -> NAME  X/=X' {
        for Y in n1,n2,n3 -> NAME  true
            for Y' in n1,n2,n3 -> NAME  Y/=Y'
                KB: ~val(X,Y)=val(X',Y')
        for Y in n4,n5,n6 -> NAME  true
            for Y' in n4,n5,n6 -> NAME  Y/=Y'
                KB: ~val(X,Y)=val(X',Y')
        for Y in n7,n8,n9 -> NAME  true
            for Y' in n7,n8,n9 -> NAME  Y/=Y'
                KB: ~val(X,Y)=val(X',Y')
    }
}
for X in n4,n5,n6 -> NAME  true {
    for X' in n4,n5,n6 -> NAME  X/=X' {
        for Y in n1,n2,n3 -> NAME  true
            for Y' in n1,n2,n3 -> NAME  Y/=Y'
                KB: ~val(X,Y)=val(X',Y')
        for Y in n4,n5,n6 -> NAME  true
            for Y' in n4,n5,n6 -> NAME  Y/=Y'
                KB: ~val(X,Y)=val(X',Y')
        for Y in n7,n8,n9 -> NAME  true
            for Y' in n7,n8,n9 -> NAME  Y/=Y'
                KB: ~val(X,Y)=val(X',Y')
    }
}
for X in n7,n8,n9 -> NAME  true {
    for X' in n7,n8,n9 -> NAME  X/=X' {
        for Y in n1,n2,n3 -> NAME  true
            for Y' in n1,n2,n3 -> NAME  Y/=Y'
                KB: ~val(X,Y)=val(X',Y')
        for Y in n4,n5,n6 -> NAME  true
            for Y' in n4,n5,n6 -> NAME  Y/=Y'
                KB: ~val(X,Y)=val(X',Y')
        for Y in n7,n8,n9 -> NAME  true
            for Y' in n7,n8,n9 -> NAME  Y/=Y'
                KB: ~val(X,Y)=val(X',Y')
    }
}
for X in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  true
    for Y in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  true
        KB: val(X,Y)=n1 v val(X,Y)=n2 v val(X,Y)=n3 v
            val(X,Y)=n4 v val(X,Y)=n5 v val(X,Y)=n6 v
            val(X,Y)=n7 v val(X,Y)=n8 v val(X,Y)=n9



// A few different Sudoku games are defined below. To choose one of them, set
// the 'game' accordingly.
Sort GAME
Name wiki1/0,
    mo1/0, mo2/0,
    other1/0, other2/0,
    top1465_77/0,
    menneske1/0, menneske2/0, menneske3/0, menneske4/0,
    washpost11/0, washpost12/0,
    washpost21/0, washpost22/0,
    washpost31/0, washpost32/0, washpost33/0, washpost34/0,
    washpost41/0, washpost42/0, washpost43/0, washpost44/0, washpost45/0,
    washpost51/0, washpost52/0, washpost53/0,
    washpostE1/0, washpostE2/0, washpostE3/0,
    nytimesE1/0, nytimesM1/0, nytimesH1/0,
    nytimesE2/0, nytimesM2/0, nytimesH2/0,
    szH1/0 -> GAME
Fun game/0 -> GAME
KB: game=washpost52


// A Sudoku game from Wikipedia article.
// Split level 0.
if K<0> game=wiki1 {
    KB: val(n1,n1)=n5
    KB: val(n1,n2)=n6
    KB: val(n1,n4)=n8
    KB: val(n1,n5)=n4
    KB: val(n1,n6)=n7
    KB: val(n2,n1)=n3
    KB: val(n2,n3)=n9
    KB: val(n2,n7)=n6
    KB: val(n3,n3)=n8
    KB: val(n4,n2)=n1
    KB: val(n4,n5)=n8
    KB: val(n4,n8)=n4
    KB: val(n5,n1)=n7
    KB: val(n5,n2)=n9
    KB: val(n5,n4)=n6
    KB: val(n5,n6)=n2
    KB: val(n5,n8)=n1
    KB: val(n5,n9)=n8
    KB: val(n6,n2)=n5
    KB: val(n6,n5)=n3
    KB: val(n6,n8)=n9
    KB: val(n7,n7)=n2
    KB: val(n8,n3)=n6
    KB: val(n8,n7)=n8
    KB: val(n8,n9)=n7
    KB: val(n9,n4)=n3
    KB: val(n9,n5)=n1
    KB: val(n9,n6)=n6
    KB: val(n9,n8)=n5
    KB: val(n9,n9)=n9
}

// Sudoku from http://mathoverflow.net/questions/27361/do-actual-sudoku-puzzles-have-a-unique-rational-solution.
// Split level 1 (for 1 cell).
if K<0> game=mo1 {
    KB: val(n1,n1)=n3
    KB: val(n1,n2)=n6
    KB: val(n1,n3)=n4
    KB: val(n1,n4)=n7
    KB: val(n1,n5)=n8
    KB: val(n1,n6)=n5
    KB: val(n1,n7)=n1
    KB: val(n1,n8)=n9
    KB: val(n1,n9)=n2
    KB: val(n2,n1)=n7
    KB: val(n2,n2)=n9
    KB: val(n2,n5)=n4
    KB: val(n2,n6)=n3
    KB: val(n2,n7)=n6
    KB: val(n2,n8)=n8
    KB: val(n2,n9)=n5
    KB: val(n3,n1)=n8
    KB: val(n3,n3)=n5
    KB: val(n3,n4)=n9
    KB: val(n3,n6)=n6
    KB: val(n3,n7)=n3
    KB: val(n3,n8)=n4
    KB: val(n3,n9)=n7
    KB: val(n4,n1)=n6
    KB: val(n4,n3)=n9
    KB: val(n4,n4)=n5
    KB: val(n4,n5)=n7
    KB: val(n4,n6)=n8
    KB: val(n4,n7)=n2
    KB: val(n4,n9)=n4
    KB: val(n5,n1)=n4
    KB: val(n5,n2)=n7
    KB: val(n5,n4)=n3
    KB: val(n5,n6)=n9
    KB: val(n5,n7)=n5
    KB: val(n5,n9)=n8
    KB: val(n6,n1)=n5
    KB: val(n6,n3)=n8
    KB: val(n6,n6)=n4
    KB: val(n6,n7)=n7
    KB: val(n6,n9)=n9
    KB: val(n7,n1)=n1
    KB: val(n7,n2)=n4
    KB: val(n7,n3)=n3
    KB: val(n7,n4)=n8
    KB: val(n7,n5)=n5
    KB: val(n7,n6)=n2
    KB: val(n7,n7)=n9
    KB: val(n7,n8)=n7
    KB: val(n7,n9)=n6
    KB: val(n8,n1)=n2
    KB: val(n8,n2)=n8
    KB: val(n8,n3)=n7
    KB: val(n8,n4)=n6
    KB: val(n8,n5)=n9
    KB: val(n8,n6)=n1
    KB: val(n8,n7)=n4
    KB: val(n8,n8)=n5
    KB: val(n8,n9)=n3
    KB: val(n9,n1)=n9
    KB: val(n9,n2)=n5
    KB: val(n9,n3)=n6
    KB: val(n9,n4)=n4
    KB: val(n9,n5)=n3
    KB: val(n9,n6)=n7
    KB: val(n9,n7)=n8
    KB: val(n9,n8)=n2
    KB: val(n9,n9)=n1
}

// Sudoku from http://mathoverflow.net/questions/27361/do-actual-sudoku-puzzles-have-a-unique-rational-solution.
// Split level 1 (for 13 cell).
// Split level 2 (for 1 cell).
if K<0> game=mo2 {
    KB: val(n1,n1)=n1
    KB: val(n1,n5)=n6
    KB: val(n2,n2)=n5
    KB: val(n2,n3)=n6
    KB: val(n2,n6)=n4
    KB: val(n2,n8)=n1
    KB: val(n3,n4)=n2
    KB: val(n3,n8)=n3
    KB: val(n3,n9)=n7
    KB: val(n4,n1)=n8
    KB: val(n4,n2)=n6
    KB: val(n4,n5)=n4
    KB: val(n4,n9)=n5
    KB: val(n5,n3)=n4
    KB: val(n5,n7)=n1
    KB: val(n6,n1)=n7
    KB: val(n6,n5)=n3
    KB: val(n6,n8)=n6
    KB: val(n6,n9)=n4
    KB: val(n7,n1)=n5
    KB: val(n7,n2)=n9
    KB: val(n7,n6)=n1
    KB: val(n8,n2)=n7
    KB: val(n8,n4)=n6
    KB: val(n8,n7)=n5
    KB: val(n8,n8)=n9
    KB: val(n9,n9)=n1
}

// Sudoku from a database.
// Split level 1 (for 13 cell).
if K<0> game=other1 {
    KB: val(n1,n5)=n5
    KB: val(n1,n6)=n1
    KB: val(n2,n9)=n9
    KB: val(n3,n1)=n1
    KB: val(n3,n3)=n6
    KB: val(n3,n8)=n2
    KB: val(n4,n1)=n9
    KB: val(n4,n2)=n4
    KB: val(n4,n4)=n3
    KB: val(n4,n7)=n2
    KB: val(n5,n5)=n9
    KB: val(n5,n6)=n7
    KB: val(n6,n5)=n2
    KB: val(n6,n8)=n7
    KB: val(n7,n1)=n3
    KB: val(n7,n2)=n8
    KB: val(n7,n5)=n6
    KB: val(n8,n1)=n4
    KB: val(n8,n4)=n9
    KB: val(n8,n9)=n6
    KB: val(n9,n1)=n6
    KB: val(n9,n3)=n1
    KB: val(n9,n4)=n4
    KB: val(n9,n5)=n8
    KB: val(n9,n9)=n5
}

// Sudoku from a championship
// (http://www.nytimes.com/2006/05/01/arts/01conn.html)
// 8..75...3.3..48.2.1.......634..7...879.48..312.8....745..814..7.8.327.4.4..569..2
//  8     7 5       3
//    3     4 8   2
//  1               6
//  3 4     7       8
//  7 9   4 8     3 1
//  2   8         7 4
//  5     8 1 4     7
//    8   3 2 7   4
//  4     5 6 9     2
if K<0> game=other2 {
    KB: val(n1,n1)=n8
    KB: val(n4,n1)=n7
    KB: val(n5,n1)=n5
    KB: val(n9,n1)=n3
    KB: val(n2,n2)=n3
    KB: val(n5,n2)=n4
    KB: val(n6,n2)=n8
    KB: val(n8,n2)=n2
    KB: val(n1,n3)=n1
    KB: val(n9,n3)=n6
    KB: val(n1,n4)=n3
    KB: val(n2,n4)=n4
    KB: val(n5,n4)=n7
    KB: val(n9,n4)=n8
    KB: val(n1,n5)=n7
    KB: val(n2,n5)=n9
    KB: val(n4,n5)=n4
    KB: val(n5,n5)=n8
    KB: val(n8,n5)=n3
    KB: val(n9,n5)=n1
    KB: val(n1,n6)=n2
    KB: val(n3,n6)=n8
    KB: val(n8,n6)=n7
    KB: val(n9,n6)=n4
    KB: val(n1,n7)=n5
    KB: val(n4,n7)=n8
    KB: val(n5,n7)=n1
    KB: val(n6,n7)=n4
    KB: val(n9,n7)=n7
    KB: val(n2,n8)=n8
    KB: val(n4,n8)=n3
    KB: val(n5,n8)=n2
    KB: val(n6,n8)=n7
    KB: val(n8,n8)=n4
    KB: val(n1,n9)=n4
    KB: val(n4,n9)=n5
    KB: val(n5,n9)=n6
    KB: val(n6,n9)=n9
    KB: val(n9,n9)=n2
}

// Sudoku Top 1465 Number 77
// Split level >2 (unknown).
if K<0> game=top1465_77 {
    KB: val(n1,n1)=n7
    KB: val(n2,n2)=n2
    KB: val(n2,n5)=n6
    KB: val(n2,n8)=n3
    KB: val(n3,n3)=n3
    KB: val(n3,n6)=n1
    KB: val(n3,n9)=n9
    KB: val(n4,n4)=n5
    KB: val(n4,n7)=n3
    KB: val(n5,n2)=n7
    KB: val(n5,n5)=n2
    KB: val(n5,n8)=n4
    KB: val(n6,n3)=n8
    KB: val(n6,n6)=n7
    KB: val(n6,n9)=n1
    KB: val(n7,n1)=n4
    KB: val(n7,n4)=n3
    KB: val(n7,n7)=n9
    KB: val(n8,n2)=n8
    KB: val(n8,n5)=n9
    KB: val(n8,n8)=n6
    KB: val(n9,n3)=n9
    KB: val(n9,n6)=n6
    KB: val(n9,n9)=n5
}

// Sudoku from http://www.menneske.no/sudoku/eng/ (super easy)
// Split level 0.
if K<0> game=menneske1 {
    KB: val(n3,n1)=n5
    KB: val(n7,n1)=n4
    KB: val(n4,n2)=n7
    KB: val(n5,n2)=n4
    KB: val(n6,n2)=n5
    KB: val(n2,n3)=n7
    KB: val(n4,n3)=n3
    KB: val(n6,n3)=n8
    KB: val(n8,n3)=n6
    KB: val(n2,n4)=n4
    KB: val(n3,n4)=n2
    KB: val(n5,n4)=n8
    KB: val(n7,n4)=n6
    KB: val(n8,n4)=n7
    KB: val(n2,n5)=n1
    KB: val(n4,n5)=n4
    KB: val(n6,n5)=n9
    KB: val(n8,n5)=n3
    KB: val(n2,n6)=n3
    KB: val(n3,n6)=n7
    KB: val(n5,n6)=n5
    KB: val(n7,n6)=n1
    KB: val(n8,n6)=n4
    KB: val(n2,n7)=n2
    KB: val(n4,n7)=n6
    KB: val(n6,n7)=n7
    KB: val(n8,n7)=n5
    KB: val(n4,n8)=n8
    KB: val(n5,n8)=n9
    KB: val(n6,n8)=n1
    KB: val(n3,n9)=n8
    KB: val(n7,n9)=n3
}

// Sudoku from http://www.menneske.no/sudoku/eng/ (very easy)
// Split level 0.
if K<0> game=menneske2 {
    KB: val(n1,n1)=n2
    KB: val(n7,n1)=n6
    KB: val(n8,n1)=n5
    KB: val(n1,n2)=n6
    KB: val(n5,n2)=n5
    KB: val(n8,n2)=n4
    KB: val(n2,n3)=n9
    KB: val(n3,n3)=n3
    KB: val(n5,n3)=n4
    KB: val(n7,n3)=n2
    KB: val(n4,n4)=n2
    KB: val(n5,n4)=n6
    KB: val(n6,n4)=n1
    KB: val(n2,n5)=n2
    KB: val(n3,n5)=n9
    KB: val(n4,n5)=n8
    KB: val(n6,n5)=n4
    KB: val(n7,n5)=n1
    KB: val(n8,n5)=n6
    KB: val(n4,n6)=n9
    KB: val(n5,n6)=n3
    KB: val(n6,n6)=n5
    KB: val(n1,n7)=n1
    KB: val(n3,n7)=n5
    KB: val(n5,n7)=n2
    KB: val(n7,n7)=n4
    KB: val(n8,n7)=n9
    KB: val(n1,n8)=n7
    KB: val(n2,n8)=n3
    KB: val(n5,n8)=n1
    KB: val(n9,n8)=n8
    KB: val(n9,n9)=n7
}

// Sudoku from http://www.menneske.no/sudoku/eng/ (hard)
// Split level 1 (for 14 cell).
// Split level 2 (for 1 cell).
if K<0> game=menneske3 {
    KB: val(n1,n1)=n3
    KB: val(n3,n1)=n8
    KB: val(n4,n1)=n9
    KB: val(n3,n2)=n6
    KB: val(n4,n2)=n1
    KB: val(n8,n2)=n5
    KB: val(n9,n2)=n3
    KB: val(n2,n3)=n1
    KB: val(n6,n3)=n3
    KB: val(n7,n3)=n8
    KB: val(n2,n4)=n3
    KB: val(n5,n4)=n6
    KB: val(n8,n4)=n9
    KB: val(n1,n5)=n8
    KB: val(n9,n5)=n5
    KB: val(n2,n6)=n7
    KB: val(n5,n6)=n2
    KB: val(n8,n6)=n4
    KB: val(n3,n7)=n3
    KB: val(n4,n7)=n8
    KB: val(n8,n7)=n7
    KB: val(n1,n8)=n2
    KB: val(n2,n8)=n5
    KB: val(n6,n8)=n7
    KB: val(n7,n8)=n4
    KB: val(n6,n9)=n2
    KB: val(n7,n9)=n5
    KB: val(n9,n9)=n6
}

// Sudoku from http://www.menneske.no/sudoku/eng/ (very hard)
// Split level 1 (for 6 cell).
if K<0> game=menneske4 {
    KB: val(n3,n1)=n9
    KB: val(n6,n1)=n3
    KB: val(n9,n1)=n8
    KB: val(n2,n2)=n5
    KB: val(n5,n2)=n2
    KB: val(n7,n2)=n1
    KB: val(n9,n2)=n7
    KB: val(n1,n3)=n3
    KB: val(n2,n3)=n7
    KB: val(n6,n3)=n5
    KB: val(n7,n3)=n6
    KB: val(n1,n4)=n1
    KB: val(n3,n4)=n4
    KB: val(n2,n5)=n8
    KB: val(n8,n5)=n6
    KB: val(n7,n6)=n4
    KB: val(n9,n6)=n3
    KB: val(n3,n7)=n3
    KB: val(n4,n7)=n1
    KB: val(n9,n7)=n6
    KB: val(n1,n8)=n6
    KB: val(n3,n8)=n8
    KB: val(n5,n8)=n4
    KB: val(n7,n8)=n3
    KB: val(n8,n8)=n2
    KB: val(n1,n9)=n5
    KB: val(n4,n9)=n3
    KB: val(n7,n9)=n8
}


// Washington Post 1/14/17
// 18........5.28691..6...4...9.6..2.4..4..175.2....4968.4...6..........751.....14.9
//  1 8
//    5   2 8 6 9 1
//    6       4
//  9   6     2   4
//    4     1 7 5   2
//          4 9 6 8
//  4       6
//              7 5 1
//            1 4   9
if K<0> game=washpost41 {
    KB: val(n1,n1)=n1
    KB: val(n2,n1)=n8
    KB: val(n2,n2)=n5
    KB: val(n4,n2)=n2
    KB: val(n5,n2)=n8
    KB: val(n6,n2)=n6
    KB: val(n7,n2)=n9
    KB: val(n8,n2)=n1
    KB: val(n2,n3)=n6
    KB: val(n6,n3)=n4
    KB: val(n1,n4)=n9
    KB: val(n3,n4)=n6
    KB: val(n6,n4)=n2
    KB: val(n8,n4)=n4
    KB: val(n2,n5)=n4
    KB: val(n5,n5)=n1
    KB: val(n6,n5)=n7
    KB: val(n7,n5)=n5
    KB: val(n9,n5)=n2
    KB: val(n5,n6)=n4
    KB: val(n6,n6)=n9
    KB: val(n7,n6)=n6
    KB: val(n8,n6)=n8
    KB: val(n1,n7)=n4
    KB: val(n5,n7)=n6
    KB: val(n7,n8)=n7
    KB: val(n8,n8)=n5
    KB: val(n9,n8)=n1
    KB: val(n6,n9)=n1
    KB: val(n7,n9)=n4
    KB: val(n9,n9)=n9
}

// Washington Post 1/15/17
// 7..65.4..8........154.7.2...7..4.83.....369..4..981.........62..275..1.4.4..12..7
//  7     6 5   4
//  8
//  1 5 4   7   2
//    7     4   8 3
//          3 6 9
//  4     9 8 1
//              6 2
//    2 7 5     1   4
//    4     1 2     7
if K<0> game=washpost51 {
    KB: val(n1,n1)=n7
    KB: val(n4,n1)=n6
    KB: val(n5,n1)=n5
    KB: val(n7,n1)=n4
    KB: val(n1,n2)=n8
    KB: val(n1,n3)=n1
    KB: val(n2,n3)=n5
    KB: val(n3,n3)=n4
    KB: val(n5,n3)=n7
    KB: val(n7,n3)=n2
    KB: val(n2,n4)=n7
    KB: val(n5,n4)=n4
    KB: val(n7,n4)=n8
    KB: val(n8,n4)=n3
    KB: val(n5,n5)=n3
    KB: val(n6,n5)=n6
    KB: val(n7,n5)=n9
    KB: val(n1,n6)=n4
    KB: val(n4,n6)=n9
    KB: val(n5,n6)=n8
    KB: val(n6,n6)=n1
    KB: val(n7,n7)=n6
    KB: val(n8,n7)=n2
    KB: val(n2,n8)=n2
    KB: val(n3,n8)=n7
    KB: val(n4,n8)=n5
    KB: val(n7,n8)=n1
    KB: val(n9,n8)=n4
    KB: val(n2,n9)=n4
    KB: val(n5,n9)=n1
    KB: val(n6,n9)=n2
    KB: val(n9,n9)=n7
}

// Washington Post 1/16/17
// 6..95.312..1.2.68....86.75..9678.24.5..146....1729..65.3.4....62.951..37174.32..8
//  6     9 5   3 1 2
//      1   2   6 8
//        8 6   7 5
//    9 6 7 8   2 4
//  5     1 4 6
//    1 7 2 9     6 5
//    3   4         6
//  2   9 5 1     3 7
//  1 7 4   3 2     8
if K<0> game=washpost11 {
    KB: val(n1,n1)=n6
    KB: val(n4,n1)=n9
    KB: val(n5,n1)=n5
    KB: val(n7,n1)=n3
    KB: val(n8,n1)=n1
    KB: val(n9,n1)=n2
    KB: val(n3,n2)=n1
    KB: val(n5,n2)=n2
    KB: val(n7,n2)=n6
    KB: val(n8,n2)=n8
    KB: val(n4,n3)=n8
    KB: val(n5,n3)=n6
    KB: val(n7,n3)=n7
    KB: val(n8,n3)=n5
    KB: val(n2,n4)=n9
    KB: val(n3,n4)=n6
    KB: val(n4,n4)=n7
    KB: val(n5,n4)=n8
    KB: val(n7,n4)=n2
    KB: val(n8,n4)=n4
    KB: val(n1,n5)=n5
    KB: val(n4,n5)=n1
    KB: val(n5,n5)=n4
    KB: val(n6,n5)=n6
    KB: val(n2,n6)=n1
    KB: val(n3,n6)=n7
    KB: val(n4,n6)=n2
    KB: val(n5,n6)=n9
    KB: val(n8,n6)=n6
    KB: val(n9,n6)=n5
    KB: val(n2,n7)=n3
    KB: val(n4,n7)=n4
    KB: val(n9,n7)=n6
    KB: val(n1,n8)=n2
    KB: val(n3,n8)=n9
    KB: val(n4,n8)=n5
    KB: val(n5,n8)=n1
    KB: val(n8,n8)=n3
    KB: val(n9,n8)=n7
    KB: val(n1,n9)=n1
    KB: val(n2,n9)=n7
    KB: val(n3,n9)=n4
    KB: val(n5,n9)=n3
    KB: val(n6,n9)=n2
    KB: val(n9,n9)=n8
}

// Washington Post 1/17/17
// ..48......8.5.29.6.7...4.8.239..75617.8.51..4.45...837.9..4831....1.3.7..13..5.29
//      4 8
//    8   5   2 9   6
//    7       4   8
//  2 3 9     7 5 6 1
//  7   8   5 1     4
//    4 5       8 3 7
//    9     4 8 3 1
//        1   3   7
//    1 3     5   2 9
if K<0> game=washpost21 {
    KB: val(n3,n1)=n4
    KB: val(n4,n1)=n8
    KB: val(n2,n2)=n8
    KB: val(n4,n2)=n5
    KB: val(n6,n2)=n2
    KB: val(n7,n2)=n9
    KB: val(n9,n2)=n6
    KB: val(n2,n3)=n7
    KB: val(n6,n3)=n4
    KB: val(n8,n3)=n8
    KB: val(n1,n4)=n2
    KB: val(n2,n4)=n3
    KB: val(n3,n4)=n9
    KB: val(n6,n4)=n7
    KB: val(n7,n4)=n5
    KB: val(n8,n4)=n6
    KB: val(n9,n4)=n1
    KB: val(n1,n5)=n7
    KB: val(n3,n5)=n8
    KB: val(n5,n5)=n5
    KB: val(n6,n5)=n1
    KB: val(n9,n5)=n4
    KB: val(n2,n6)=n4
    KB: val(n3,n6)=n5
    KB: val(n7,n6)=n8
    KB: val(n8,n6)=n3
    KB: val(n9,n6)=n7
    KB: val(n2,n7)=n9
    KB: val(n5,n7)=n4
    KB: val(n6,n7)=n8
    KB: val(n7,n7)=n3
    KB: val(n8,n7)=n1
    KB: val(n4,n8)=n1
    KB: val(n6,n8)=n3
    KB: val(n8,n8)=n7
    KB: val(n2,n9)=n1
    KB: val(n3,n9)=n3
    KB: val(n6,n9)=n5
    KB: val(n8,n9)=n2
    KB: val(n9,n9)=n9
}

// Washington Post 1/18/17
// 92.458....85.319.4...9..5..49....3....6.1.8.9...549.2..198.46.58...2549.5....3.1.
//  9 2   4 5 8
//    8 5   3 1 9   4
//        9     5
//  4 9         3
//      6   1   8   9
//        5 4 9   2
//    1 9 8   4 6   5
//  8       2 5 4 9
//  5         3   1
if K<0> game=washpost31 {
    KB: val(n1,n1)=n9
    KB: val(n2,n1)=n2
    KB: val(n4,n1)=n4
    KB: val(n5,n1)=n5
    KB: val(n6,n1)=n8
    KB: val(n2,n2)=n8
    KB: val(n3,n2)=n5
    KB: val(n5,n2)=n3
    KB: val(n6,n2)=n1
    KB: val(n7,n2)=n9
    KB: val(n9,n2)=n4
    KB: val(n4,n3)=n9
    KB: val(n7,n3)=n5
    KB: val(n1,n4)=n4
    KB: val(n2,n4)=n9
    KB: val(n7,n4)=n3
    KB: val(n3,n5)=n6
    KB: val(n5,n5)=n1
    KB: val(n7,n5)=n8
    KB: val(n9,n5)=n9
    KB: val(n4,n6)=n5
    KB: val(n5,n6)=n4
    KB: val(n6,n6)=n9
    KB: val(n8,n6)=n2
    KB: val(n2,n7)=n1
    KB: val(n3,n7)=n9
    KB: val(n4,n7)=n8
    KB: val(n6,n7)=n4
    KB: val(n7,n7)=n6
    KB: val(n9,n7)=n5
    KB: val(n1,n8)=n8
    KB: val(n5,n8)=n2
    KB: val(n6,n8)=n5
    KB: val(n7,n8)=n4
    KB: val(n8,n8)=n9
    KB: val(n1,n9)=n5
    KB: val(n6,n9)=n3
    KB: val(n8,n9)=n1
}

// Washington Post 1/19/17
// .9..6.85..8..712.3.31..5.....2..45..51..37......85..3.9....84...2...6....43.1962.
//    9     6   8 5
//    8     7 1 2   3
//    3 1     5
//      2     4 5
//  5 1     3 7
//        8 5     3
//  9         8 5
//    2       6
//    4 3   1 9 6 2
if K<0> game=washpost32 {
    KB: val(n2,n1)=n9
    KB: val(n5,n1)=n6
    KB: val(n7,n1)=n8
    KB: val(n8,n1)=n5
    KB: val(n2,n2)=n8
    KB: val(n5,n2)=n7
    KB: val(n6,n2)=n1
    KB: val(n7,n2)=n2
    KB: val(n9,n2)=n3
    KB: val(n2,n3)=n3
    KB: val(n3,n3)=n1
    KB: val(n6,n3)=n5
    KB: val(n3,n4)=n2
    KB: val(n6,n4)=n4
    KB: val(n7,n4)=n5
    KB: val(n1,n5)=n5
    KB: val(n2,n5)=n1
    KB: val(n5,n5)=n3
    KB: val(n6,n5)=n7
    KB: val(n4,n6)=n8
    KB: val(n5,n6)=n5
    KB: val(n8,n6)=n3
    KB: val(n1,n7)=n9
    KB: val(n6,n7)=n8
    KB: val(n7,n7)=n4
    KB: val(n2,n8)=n2
    KB: val(n6,n8)=n6
    KB: val(n2,n9)=n4
    KB: val(n3,n9)=n3
    KB: val(n5,n9)=n1
    KB: val(n6,n9)=n9
    KB: val(n7,n9)=n6
    KB: val(n8,n9)=n2
}

// Washington Post 1/20/17
// .96.51..3....93.1.3.12......684.9531.1.3.82979....5.4..53..6..41..5.......4......
//    9 6   5 1     3
//          9 3   1
//  3   1 2
//    6 8 4   9 5 3 1
//    1   3   8 2 9 7
//  9         5   4
//    5 3     6     4
//  1     5
//      4
if K<0> game=washpost42 {
    KB: val(n2,n1)=n9
    KB: val(n3,n1)=n6
    KB: val(n5,n1)=n5
    KB: val(n6,n1)=n1
    KB: val(n9,n1)=n3
    KB: val(n5,n2)=n9
    KB: val(n6,n2)=n3
    KB: val(n8,n2)=n1
    KB: val(n1,n3)=n3
    KB: val(n3,n3)=n1
    KB: val(n4,n3)=n2
    KB: val(n2,n4)=n6
    KB: val(n3,n4)=n8
    KB: val(n4,n4)=n4
    KB: val(n6,n4)=n9
    KB: val(n7,n4)=n5
    KB: val(n8,n4)=n3
    KB: val(n9,n4)=n1
    KB: val(n2,n5)=n1
    KB: val(n4,n5)=n3
    KB: val(n6,n5)=n8
    KB: val(n7,n5)=n2
    KB: val(n8,n5)=n9
    KB: val(n9,n5)=n7
    KB: val(n1,n6)=n9
    KB: val(n6,n6)=n5
    KB: val(n8,n6)=n4
    KB: val(n2,n7)=n5
    KB: val(n3,n7)=n3
    KB: val(n6,n7)=n6
    KB: val(n9,n7)=n4
    KB: val(n1,n8)=n1
    KB: val(n4,n8)=n5
    KB: val(n3,n9)=n4
}

// Washington Post 1/21/17
// 48..6..3.......9.62.69.3.7......736...8..6..7.61.....8...2987..19.6.....852....49
//  4 8     6     3
//              9   6
//  2   6 9   3   7
//            7 3 6
//      8     6     7
//    6 1           8
//        2 9 8 7
//  1 9   6
//  8 5 2         4 9
if K<0> game=washpost43 {
    KB: val(n1,n1)=n4
    KB: val(n2,n1)=n8
    KB: val(n5,n1)=n6
    KB: val(n8,n1)=n3
    KB: val(n7,n2)=n9
    KB: val(n9,n2)=n6
    KB: val(n1,n3)=n2
    KB: val(n3,n3)=n6
    KB: val(n4,n3)=n9
    KB: val(n6,n3)=n3
    KB: val(n8,n3)=n7
    KB: val(n6,n4)=n7
    KB: val(n7,n4)=n3
    KB: val(n8,n4)=n6
    KB: val(n3,n5)=n8
    KB: val(n6,n5)=n6
    KB: val(n9,n5)=n7
    KB: val(n2,n6)=n6
    KB: val(n3,n6)=n1
    KB: val(n9,n6)=n8
    KB: val(n4,n7)=n2
    KB: val(n5,n7)=n9
    KB: val(n6,n7)=n8
    KB: val(n7,n7)=n7
    KB: val(n1,n8)=n1
    KB: val(n2,n8)=n9
    KB: val(n4,n8)=n6
    KB: val(n1,n9)=n8
    KB: val(n2,n9)=n5
    KB: val(n3,n9)=n2
    KB: val(n8,n9)=n4
    KB: val(n9,n9)=n9
}

// Washington Post 1/22/17
// ..1..73.67...93..5...86..7..49.....2..592....32.....5..5...9.2......87..9.4.1..6.
//      1     7 3   6
//  7       9 3     5
//        8 6     7
//    4 9           2
//      5 9 2
//  3 2           5
//    5       9   2
//            8 7
//  9   4   1     6
if K<0> game=washpost52 {
    KB: val(n3,n1)=n1
    KB: val(n6,n1)=n7
    KB: val(n7,n1)=n3
    KB: val(n9,n1)=n6
    KB: val(n1,n2)=n7
    KB: val(n5,n2)=n9
    KB: val(n6,n2)=n3
    KB: val(n9,n2)=n5
    KB: val(n4,n3)=n8
    KB: val(n5,n3)=n6
    KB: val(n8,n3)=n7
    KB: val(n2,n4)=n4
    KB: val(n3,n4)=n9
    KB: val(n9,n4)=n2
    KB: val(n3,n5)=n5
    KB: val(n4,n5)=n9
    KB: val(n5,n5)=n2
    KB: val(n1,n6)=n3
    KB: val(n2,n6)=n2
    KB: val(n8,n6)=n5
    KB: val(n2,n7)=n5
    KB: val(n6,n7)=n9
    KB: val(n8,n7)=n2
    KB: val(n6,n8)=n8
    KB: val(n7,n8)=n7
    KB: val(n1,n9)=n9
    KB: val(n3,n9)=n4
    KB: val(n5,n9)=n1
    KB: val(n8,n9)=n6
}

// Washington Post 1/23/17
// 34785.1.6.861739.4.9564....8.9.276...........76.....32.28..43.1.1..38269...2615..
//  3 4 7 8 5   1   6
//    8 6 1 7 3 9   4
//    9 5 6 4
//  8   9   2 7 6
//
//  7 6           3 2
//    2 8     4 3   1
//    1     3 8 2 6 9
//        2 6 1 5
if K<0> game=washpost12 {
    KB: val(n1,n1)=n3
    KB: val(n2,n1)=n4
    KB: val(n3,n1)=n7
    KB: val(n4,n1)=n8
    KB: val(n5,n1)=n5
    KB: val(n7,n1)=n1
    KB: val(n9,n1)=n6
    KB: val(n2,n2)=n8
    KB: val(n3,n2)=n6
    KB: val(n4,n2)=n1
    KB: val(n5,n2)=n7
    KB: val(n6,n2)=n3
    KB: val(n7,n2)=n9
    KB: val(n9,n2)=n4
    KB: val(n2,n3)=n9
    KB: val(n3,n3)=n5
    KB: val(n4,n3)=n6
    KB: val(n5,n3)=n4
    KB: val(n1,n4)=n8
    KB: val(n3,n4)=n9
    KB: val(n5,n4)=n2
    KB: val(n6,n4)=n7
    KB: val(n7,n4)=n6
    KB: val(n1,n6)=n7
    KB: val(n2,n6)=n6
    KB: val(n8,n6)=n3
    KB: val(n9,n6)=n2
    KB: val(n2,n7)=n2
    KB: val(n3,n7)=n8
    KB: val(n6,n7)=n4
    KB: val(n7,n7)=n3
    KB: val(n9,n7)=n1
    KB: val(n2,n8)=n1
    KB: val(n5,n8)=n3
    KB: val(n6,n8)=n8
    KB: val(n7,n8)=n2
    KB: val(n8,n8)=n6
    KB: val(n9,n8)=n9
    KB: val(n4,n9)=n2
    KB: val(n5,n9)=n6
    KB: val(n6,n9)=n1
    KB: val(n7,n9)=n5
}

// Washington Post 1/24/17
// 67.39..42149672.53...1.4.9.8.....41.291..65...5.8..6293.74.89.191.2.7....8..3.27.
//  6 7   3 9     4 2
//  1 4 9 6 7 2   5 3
//        1   4   9
//  8           4 1
//  2 9 1     6 5
//    5   8     6 2 9
//  3   7 4   8 9   1
//  9 1   2   7
//    8     3   2 7
if K<0> game=washpost22 {
    KB: val(n1,n1)=n6
    KB: val(n2,n1)=n7
    KB: val(n4,n1)=n3
    KB: val(n5,n1)=n9
    KB: val(n8,n1)=n4
    KB: val(n9,n1)=n2
    KB: val(n1,n2)=n1
    KB: val(n2,n2)=n4
    KB: val(n3,n2)=n9
    KB: val(n4,n2)=n6
    KB: val(n5,n2)=n7
    KB: val(n6,n2)=n2
    KB: val(n8,n2)=n5
    KB: val(n9,n2)=n3
    KB: val(n4,n3)=n1
    KB: val(n6,n3)=n4
    KB: val(n8,n3)=n9
    KB: val(n1,n4)=n8
    KB: val(n7,n4)=n4
    KB: val(n8,n4)=n1
    KB: val(n1,n5)=n2
    KB: val(n2,n5)=n9
    KB: val(n3,n5)=n1
    KB: val(n6,n5)=n6
    KB: val(n7,n5)=n5
    KB: val(n2,n6)=n5
    KB: val(n4,n6)=n8
    KB: val(n7,n6)=n6
    KB: val(n8,n6)=n2
    KB: val(n9,n6)=n9
    KB: val(n1,n7)=n3
    KB: val(n3,n7)=n7
    KB: val(n4,n7)=n4
    KB: val(n6,n7)=n8
    KB: val(n7,n7)=n9
    KB: val(n9,n7)=n1
    KB: val(n1,n8)=n9
    KB: val(n2,n8)=n1
    KB: val(n4,n8)=n2
    KB: val(n6,n8)=n7
    KB: val(n2,n9)=n8
    KB: val(n5,n9)=n3
    KB: val(n7,n9)=n2
    KB: val(n8,n9)=n7
}

// Washington Post 1/25/17
// 9.7.38..5.....59...5.7...615..187..287.2...59.......786985.....1.5.26...7.29.1586
//  9   7   3 8     5
//            5 9
//    5   7       6 1
//  5     1 8 7     2
//  8 7   2       5 9
//                7 8
//  6 9 8 5
//  1   5   2 6
//  7   2 9   1 5 8 6
if K<0> game=washpost33 {
    KB: val(n1,n1)=n9
    KB: val(n3,n1)=n7
    KB: val(n5,n1)=n3
    KB: val(n6,n1)=n8
    KB: val(n9,n1)=n5
    KB: val(n6,n2)=n5
    KB: val(n7,n2)=n9
    KB: val(n2,n3)=n5
    KB: val(n4,n3)=n7
    KB: val(n8,n3)=n6
    KB: val(n9,n3)=n1
    KB: val(n1,n4)=n5
    KB: val(n4,n4)=n1
    KB: val(n5,n4)=n8
    KB: val(n6,n4)=n7
    KB: val(n9,n4)=n2
    KB: val(n1,n5)=n8
    KB: val(n2,n5)=n7
    KB: val(n4,n5)=n2
    KB: val(n8,n5)=n5
    KB: val(n9,n5)=n9
    KB: val(n8,n6)=n7
    KB: val(n9,n6)=n8
    KB: val(n1,n7)=n6
    KB: val(n2,n7)=n9
    KB: val(n3,n7)=n8
    KB: val(n4,n7)=n5
    KB: val(n1,n8)=n1
    KB: val(n3,n8)=n5
    KB: val(n5,n8)=n2
    KB: val(n6,n8)=n6
    KB: val(n1,n9)=n7
    KB: val(n3,n9)=n2
    KB: val(n4,n9)=n9
    KB: val(n6,n9)=n1
    KB: val(n7,n9)=n5
    KB: val(n8,n9)=n8
    KB: val(n9,n9)=n6
}

// Washington Post 1/26/17
// 6.97...4..7.1.4.6....65...9......43..6.42...5..5836.....12.8...9.7..1....2.9.57.8
//  6   9 7       4
//    7   1   4   6
//        6 5       9
//              4 3
//    6   4 2       5
//      5 8 3 6
//      1 2   8
//  9   7     1
//    2   9   5 7   8
if K<0> game=washpost34 {
    KB: val(n1,n1)=n6
    KB: val(n3,n1)=n9
    KB: val(n4,n1)=n7
    KB: val(n8,n1)=n4
    KB: val(n2,n2)=n7
    KB: val(n4,n2)=n1
    KB: val(n6,n2)=n4
    KB: val(n8,n2)=n6
    KB: val(n4,n3)=n6
    KB: val(n5,n3)=n5
    KB: val(n9,n3)=n9
    KB: val(n7,n4)=n4
    KB: val(n8,n4)=n3
    KB: val(n2,n5)=n6
    KB: val(n4,n5)=n4
    KB: val(n5,n5)=n2
    KB: val(n9,n5)=n5
    KB: val(n3,n6)=n5
    KB: val(n4,n6)=n8
    KB: val(n5,n6)=n3
    KB: val(n6,n6)=n6
    KB: val(n3,n7)=n1
    KB: val(n4,n7)=n2
    KB: val(n6,n7)=n8
    KB: val(n1,n8)=n9
    KB: val(n3,n8)=n7
    KB: val(n6,n8)=n1
    KB: val(n2,n9)=n2
    KB: val(n4,n9)=n9
    KB: val(n6,n9)=n5
    KB: val(n7,n9)=n7
    KB: val(n9,n9)=n8
}

// Washington Post 1/27/17
// 2...86..3...2.....8..79.....9.....15.8...5.2..61..2..8...654..2.45.27.89..7...5.4
//  2       8 6     3
//        2
//  8     7 9
//    9           1 5
//    8       5   2
//    6 1     2     8
//        6 5 4     2
//    4 5   2 7   8 9
//      7       5   4
if K<0> game=washpost44 {
    KB: val(n1,n1)=n2
    KB: val(n5,n1)=n8
    KB: val(n6,n1)=n6
    KB: val(n9,n1)=n3
    KB: val(n4,n2)=n2
    KB: val(n1,n3)=n8
    KB: val(n4,n3)=n7
    KB: val(n5,n3)=n9
    KB: val(n2,n4)=n9
    KB: val(n8,n4)=n1
    KB: val(n9,n4)=n5
    KB: val(n2,n5)=n8
    KB: val(n6,n5)=n5
    KB: val(n8,n5)=n2
    KB: val(n2,n6)=n6
    KB: val(n3,n6)=n1
    KB: val(n6,n6)=n2
    KB: val(n9,n6)=n8
    KB: val(n4,n7)=n6
    KB: val(n5,n7)=n5
    KB: val(n6,n7)=n4
    KB: val(n9,n7)=n2
    KB: val(n2,n8)=n4
    KB: val(n3,n8)=n5
    KB: val(n5,n8)=n2
    KB: val(n6,n8)=n7
    KB: val(n8,n8)=n8
    KB: val(n9,n8)=n9
    KB: val(n3,n9)=n7
    KB: val(n7,n9)=n5
    KB: val(n9,n9)=n4
}

// Washington Post 1/28/17
// 516.7.....948...172...5.9.41....84.3.23...8.6...7.......2.9...5.65..4........76.9
//  5 1 6   7
//    9 4 8       1 7
//  2       5   9   4
//  1         8 4   3
//    2 3       8   6
//        7
//      2   9       5
//    6 5     4
//            7 6   9
if K<0> game=washpost45 {
    KB: val(n1,n1)=n5
    KB: val(n2,n1)=n1
    KB: val(n3,n1)=n6
    KB: val(n5,n1)=n7
    KB: val(n2,n2)=n9
    KB: val(n3,n2)=n4
    KB: val(n4,n2)=n8
    KB: val(n8,n2)=n1
    KB: val(n9,n2)=n7
    KB: val(n1,n3)=n2
    KB: val(n5,n3)=n5
    KB: val(n7,n3)=n9
    KB: val(n9,n3)=n4
    KB: val(n1,n4)=n1
    KB: val(n6,n4)=n8
    KB: val(n7,n4)=n4
    KB: val(n9,n4)=n3
    KB: val(n2,n5)=n2
    KB: val(n3,n5)=n3
    KB: val(n7,n5)=n8
    KB: val(n9,n5)=n6
    KB: val(n4,n6)=n7
    KB: val(n3,n7)=n2
    KB: val(n5,n7)=n9
    KB: val(n9,n7)=n5
    KB: val(n2,n8)=n6
    KB: val(n3,n8)=n5
    KB: val(n6,n8)=n4
    KB: val(n6,n9)=n7
    KB: val(n7,n9)=n6
    KB: val(n9,n9)=n9
}

// Washington Post 1/29/17
// 6..8.1....57....28..8....1..61..8.3..2.4.68.1....1...7.....21..843....79.......65
//  6     8   1
//    5 7         2 8
//      8         1
//    6 1     8   3
//    2   4   6 8   1
//          1       7
//            2 1
//  8 4 3         7 9
//                6 5
if K<0> game=washpost53 {
    KB: val(n1,n1)=n6
    KB: val(n4,n1)=n8
    KB: val(n6,n1)=n1
    KB: val(n2,n2)=n5
    KB: val(n3,n2)=n7
    KB: val(n8,n2)=n2
    KB: val(n9,n2)=n8
    KB: val(n3,n3)=n8
    KB: val(n8,n3)=n1
    KB: val(n2,n4)=n6
    KB: val(n3,n4)=n1
    KB: val(n6,n4)=n8
    KB: val(n8,n4)=n3
    KB: val(n2,n5)=n2
    KB: val(n4,n5)=n4
    KB: val(n6,n5)=n6
    KB: val(n7,n5)=n8
    KB: val(n9,n5)=n1
    KB: val(n5,n6)=n1
    KB: val(n9,n6)=n7
    KB: val(n6,n7)=n2
    KB: val(n7,n7)=n1
    KB: val(n1,n8)=n8
    KB: val(n2,n8)=n4
    KB: val(n3,n8)=n3
    KB: val(n8,n8)=n7
    KB: val(n9,n8)=n9
    KB: val(n8,n9)=n6
    KB: val(n9,n9)=n5
}

// Washington Post generated (expert)
// .5.61.2..78.....9.....9...1243.6......92..........3.6.6.58..9......2.1....2..6..4
//    5   6 1   2
//  7 8           9
//          9       1
//  2 4 3   6
//      9 2
//            3   6
//  6   5 8     9
//          2   1
//      2     6     4
if K<0> game=washpostE1 {
    KB: val(n2,n1)=n5
    KB: val(n4,n1)=n6
    KB: val(n5,n1)=n1
    KB: val(n7,n1)=n2
    KB: val(n1,n2)=n7
    KB: val(n2,n2)=n8
    KB: val(n8,n2)=n9
    KB: val(n5,n3)=n9
    KB: val(n9,n3)=n1
    KB: val(n1,n4)=n2
    KB: val(n2,n4)=n4
    KB: val(n3,n4)=n3
    KB: val(n5,n4)=n6
    KB: val(n3,n5)=n9
    KB: val(n4,n5)=n2
    KB: val(n6,n6)=n3
    KB: val(n8,n6)=n6
    KB: val(n1,n7)=n6
    KB: val(n3,n7)=n5
    KB: val(n4,n7)=n8
    KB: val(n7,n7)=n9
    KB: val(n5,n8)=n2
    KB: val(n7,n8)=n1
    KB: val(n3,n9)=n2
    KB: val(n6,n9)=n6
    KB: val(n9,n9)=n4
}

// Washington Post generated (expert)
// 86....72....6..1981........2.1.368......8.4...869...3...8.4..1.47..95.8..1..67..5
//  8 6         7 2
//        6     1 9 8
//  1
//  2   1   3 6 8
//          8   4
//    8 6 9       3
//      8   4     1
//  4 7     9 5   8
//    1     6 7     5
if K<0> game=washpostE2 {
    KB: val(n1,n1)=n8
    KB: val(n2,n1)=n6
    KB: val(n7,n1)=n7
    KB: val(n8,n1)=n2
    KB: val(n4,n2)=n6
    KB: val(n7,n2)=n1
    KB: val(n8,n2)=n9
    KB: val(n9,n2)=n8
    KB: val(n1,n3)=n1
    KB: val(n1,n4)=n2
    KB: val(n3,n4)=n1
    KB: val(n5,n4)=n3
    KB: val(n6,n4)=n6
    KB: val(n7,n4)=n8
    KB: val(n5,n5)=n8
    KB: val(n7,n5)=n4
    KB: val(n2,n6)=n8
    KB: val(n3,n6)=n6
    KB: val(n4,n6)=n9
    KB: val(n8,n6)=n3
    KB: val(n3,n7)=n8
    KB: val(n5,n7)=n4
    KB: val(n8,n7)=n1
    KB: val(n1,n8)=n4
    KB: val(n2,n8)=n7
    KB: val(n5,n8)=n9
    KB: val(n6,n8)=n5
    KB: val(n8,n8)=n8
    KB: val(n2,n9)=n1
    KB: val(n5,n9)=n6
    KB: val(n6,n9)=n7
    KB: val(n9,n9)=n5
}

// Washington Post generated (expert)
// 65.2.......7..52.63......7.73....98..96.2...1..8.9....1..95...4...4.25...7...3..9
//  6 5   2
//      7     5 2   6
//  3             7
//  7 3         9 8
//    9 6   2       1
//      8   9
//  1     9 5       4
//        4   2 5
//    7       3     9
if K<0> game=washpostE3 {
    KB: val(n1,n1)=n6
    KB: val(n2,n1)=n5
    KB: val(n4,n1)=n2
    KB: val(n3,n2)=n7
    KB: val(n6,n2)=n5
    KB: val(n7,n2)=n2
    KB: val(n9,n2)=n6
    KB: val(n1,n3)=n3
    KB: val(n8,n3)=n7
    KB: val(n1,n4)=n7
    KB: val(n2,n4)=n3
    KB: val(n7,n4)=n9
    KB: val(n8,n4)=n8
    KB: val(n2,n5)=n9
    KB: val(n3,n5)=n6
    KB: val(n5,n5)=n2
    KB: val(n9,n5)=n1
    KB: val(n3,n6)=n8
    KB: val(n5,n6)=n9
    KB: val(n1,n7)=n1
    KB: val(n4,n7)=n9
    KB: val(n5,n7)=n5
    KB: val(n9,n7)=n4
    KB: val(n4,n8)=n4
    KB: val(n6,n8)=n2
    KB: val(n7,n8)=n5
    KB: val(n2,n9)=n7
    KB: val(n6,n9)=n3
    KB: val(n9,n9)=n9
}

// NYTimes Jan 27 easy
// 5.1.8...4.42.6.718..742..5..159...6.32..1.47..7.3.41.......834729..47...7....5..9
//  5   1   8       4
//    4 2   6   7 1 8
//      7 4 2     5
//    1 5 9       6
//  3 2     1   4 7
//    7   3   4 1
//            8 3 4 7
//  2 9     4 7
//  7         5     9
if K<0> game=nytimesE1 {
    KB: val(n1,n1)=n5
    KB: val(n3,n1)=n1
    KB: val(n5,n1)=n8
    KB: val(n9,n1)=n4
    KB: val(n2,n2)=n4
    KB: val(n3,n2)=n2
    KB: val(n5,n2)=n6
    KB: val(n7,n2)=n7
    KB: val(n8,n2)=n1
    KB: val(n9,n2)=n8
    KB: val(n3,n3)=n7
    KB: val(n4,n3)=n4
    KB: val(n5,n3)=n2
    KB: val(n8,n3)=n5
    KB: val(n2,n4)=n1
    KB: val(n3,n4)=n5
    KB: val(n4,n4)=n9
    KB: val(n8,n4)=n6
    KB: val(n1,n5)=n3
    KB: val(n2,n5)=n2
    KB: val(n5,n5)=n1
    KB: val(n7,n5)=n4
    KB: val(n8,n5)=n7
    KB: val(n2,n6)=n7
    KB: val(n4,n6)=n3
    KB: val(n6,n6)=n4
    KB: val(n7,n6)=n1
    KB: val(n6,n7)=n8
    KB: val(n7,n7)=n3
    KB: val(n8,n7)=n4
    KB: val(n9,n7)=n7
    KB: val(n1,n8)=n2
    KB: val(n2,n8)=n9
    KB: val(n5,n8)=n4
    KB: val(n6,n8)=n7
    KB: val(n1,n9)=n7
    KB: val(n6,n9)=n5
    KB: val(n9,n9)=n9
}

// NYTimes Jan 27 medium
// .75.1...............243..8.6..........4.71..535...46.7.....9.64....2.8....85.....
//    7 5   1
//
//      2 4 3     8
//  6
//      4   7 1     5
//  3 5       4 6   7
//            9   6 4
//          2   8
//      8 5
if K<0> game=nytimesM1 {
    KB: val(n2,n1)=n7
    KB: val(n3,n1)=n5
    KB: val(n5,n1)=n1
    KB: val(n3,n3)=n2
    KB: val(n4,n3)=n4
    KB: val(n5,n3)=n3
    KB: val(n8,n3)=n8
    KB: val(n1,n4)=n6
    KB: val(n3,n5)=n4
    KB: val(n5,n5)=n7
    KB: val(n6,n5)=n1
    KB: val(n9,n5)=n5
    KB: val(n1,n6)=n3
    KB: val(n2,n6)=n5
    KB: val(n6,n6)=n4
    KB: val(n7,n6)=n6
    KB: val(n9,n6)=n7
    KB: val(n6,n7)=n9
    KB: val(n8,n7)=n6
    KB: val(n9,n7)=n4
    KB: val(n5,n8)=n2
    KB: val(n7,n8)=n8
    KB: val(n3,n9)=n8
    KB: val(n4,n9)=n5
}

// NYTimes Jan 27 hard
// 4..3..57......6.249....5...7..84...3.....2.9...86....2167............3.62........
//  4     3     5 7
//            6   2 4
//  9         5
//  7     8 4       3
//            2   9
//      8 6         2
//  1 6 7
//              3   6
//  2
if K<0> game=nytimesH1 {
    KB: val(n1,n1)=n4
    KB: val(n4,n1)=n3
    KB: val(n7,n1)=n5
    KB: val(n8,n1)=n7
    KB: val(n6,n2)=n6
    KB: val(n8,n2)=n2
    KB: val(n9,n2)=n4
    KB: val(n1,n3)=n9
    KB: val(n6,n3)=n5
    KB: val(n1,n4)=n7
    KB: val(n4,n4)=n8
    KB: val(n5,n4)=n4
    KB: val(n9,n4)=n3
    KB: val(n6,n5)=n2
    KB: val(n8,n5)=n9
    KB: val(n3,n6)=n8
    KB: val(n4,n6)=n6
    KB: val(n9,n6)=n2
    KB: val(n1,n7)=n1
    KB: val(n2,n7)=n6
    KB: val(n3,n7)=n7
    KB: val(n7,n8)=n3
    KB: val(n9,n8)=n6
    KB: val(n1,n9)=n2
}

// NYTimes Jan 29 easy
// ...7.2....86...542291.8.6...1.2748..46..5.......81..93..7543..61.9....746.4..725.
//        7   2
//    8 6       5 4 2
//  2 9 1   8   6
//    1   2 7 4 8
//  4 6     5
//        8 1     9 3
//      7 5 4 3     6
//  1   9         7 4
//  6   4     7 2 5
if K<0> game=nytimesE2 {
    KB: val(n4,n1)=n7
    KB: val(n6,n1)=n2
    KB: val(n2,n2)=n8
    KB: val(n3,n2)=n6
    KB: val(n7,n2)=n5
    KB: val(n8,n2)=n4
    KB: val(n9,n2)=n2
    KB: val(n1,n3)=n2
    KB: val(n2,n3)=n9
    KB: val(n3,n3)=n1
    KB: val(n5,n3)=n8
    KB: val(n7,n3)=n6
    KB: val(n2,n4)=n1
    KB: val(n4,n4)=n2
    KB: val(n5,n4)=n7
    KB: val(n6,n4)=n4
    KB: val(n7,n4)=n8
    KB: val(n1,n5)=n4
    KB: val(n2,n5)=n6
    KB: val(n5,n5)=n5
    KB: val(n4,n6)=n8
    KB: val(n5,n6)=n1
    KB: val(n8,n6)=n9
    KB: val(n9,n6)=n3
    KB: val(n3,n7)=n7
    KB: val(n4,n7)=n5
    KB: val(n5,n7)=n4
    KB: val(n6,n7)=n3
    KB: val(n9,n7)=n6
    KB: val(n1,n8)=n1
    KB: val(n3,n8)=n9
    KB: val(n8,n8)=n7
    KB: val(n9,n8)=n4
    KB: val(n1,n9)=n6
    KB: val(n3,n9)=n4
    KB: val(n6,n9)=n7
    KB: val(n7,n9)=n2
    KB: val(n8,n9)=n5
}

// NYTimes Jan 29 medium
// .48.6.3..7.3....29........7.........425931.....1..........75.31...2...8.8..6...5.
//    4 8   6   3
//  7   3         2 9
//                  7
//
//  4 2 5 9 3 1
//      1
//          7 5   3 1
//        2       8
//  8     6       5
if K<0> game=nytimesM2 {
    KB: val(n2,n1)=n4
    KB: val(n3,n1)=n8
    KB: val(n5,n1)=n6
    KB: val(n7,n1)=n3
    KB: val(n1,n2)=n7
    KB: val(n3,n2)=n3
    KB: val(n8,n2)=n2
    KB: val(n9,n2)=n9
    KB: val(n9,n3)=n7
    KB: val(n1,n5)=n4
    KB: val(n2,n5)=n2
    KB: val(n3,n5)=n5
    KB: val(n4,n5)=n9
    KB: val(n5,n5)=n3
    KB: val(n6,n5)=n1
    KB: val(n3,n6)=n1
    KB: val(n5,n7)=n7
    KB: val(n6,n7)=n5
    KB: val(n8,n7)=n3
    KB: val(n9,n7)=n1
    KB: val(n4,n8)=n2
    KB: val(n8,n8)=n8
    KB: val(n1,n9)=n8
    KB: val(n4,n9)=n6
    KB: val(n8,n9)=n5
}

// NYTimes Jan 29 hard
// .6.8...5.8.7.9.......3.7..8.5...924.6....1.......7.5.353.............1..9......82
//    6   8       5
//  8   7   9
//        3   7     8
//    5       9 2 4
//  6         1
//          7   5   3
//  5 3
//              1
//  9             8 2
if K<0> game=nytimesH2 {
    KB: val(n2,n1)=n6
    KB: val(n4,n1)=n8
    KB: val(n8,n1)=n5
    KB: val(n1,n2)=n8
    KB: val(n3,n2)=n7
    KB: val(n5,n2)=n9
    KB: val(n4,n3)=n3
    KB: val(n6,n3)=n7
    KB: val(n9,n3)=n8
    KB: val(n2,n4)=n5
    KB: val(n6,n4)=n9
    KB: val(n7,n4)=n2
    KB: val(n8,n4)=n4
    KB: val(n1,n5)=n6
    KB: val(n6,n5)=n1
    KB: val(n5,n6)=n7
    KB: val(n7,n6)=n5
    KB: val(n9,n6)=n3
    KB: val(n1,n7)=n5
    KB: val(n2,n7)=n3
    KB: val(n7,n8)=n1
    KB: val(n1,n9)=n9
    KB: val(n8,n9)=n8
    KB: val(n9,n9)=n2
}

// SZ (hard)
// 1.2...75......12.3.3..62.....3...67.65.....29.97...8.....49..8..49...3.23.12.....
//  1   2       7 5
//            1 2   3
//    3     6 2
//      3       6 7
//  6 5           2 9
//    9 7       8
//        4 9     8
//    4 9       3   2
//  3   1 2
if K<0> game=szH1 {
    KB: val(n1,n1)=n1
    KB: val(n3,n1)=n2
    KB: val(n7,n1)=n7
    KB: val(n8,n1)=n5
    KB: val(n6,n2)=n1
    KB: val(n7,n2)=n2
    KB: val(n9,n2)=n3
    KB: val(n2,n3)=n3
    KB: val(n5,n3)=n6
    KB: val(n6,n3)=n2
    KB: val(n3,n4)=n3
    KB: val(n7,n4)=n6
    KB: val(n8,n4)=n7
    KB: val(n1,n5)=n6
    KB: val(n2,n5)=n5
    KB: val(n8,n5)=n2
    KB: val(n9,n5)=n9
    KB: val(n2,n6)=n9
    KB: val(n3,n6)=n7
    KB: val(n7,n6)=n8
    KB: val(n4,n7)=n4
    KB: val(n5,n7)=n9
    KB: val(n8,n7)=n8
    KB: val(n2,n8)=n4
    KB: val(n3,n8)=n9
    KB: val(n7,n8)=n3
    KB: val(n9,n8)=n2
    KB: val(n1,n9)=n3
    KB: val(n3,n9)=n1
    KB: val(n4,n9)=n2
}

Call: su_init(n1,n2,n3,n4,n5,n6,n7,n8,n9)

if G -> GAME  K<0> game=G {
    Call: print(G)
}
Call: su_print()

Let found := true
while found {
    Let found := false
    for X in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  true {
        for Y in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  Fa n ~K<0> val(X,Y)=n {
            if N in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  K<1> val(X,Y)=N {
                KB: val(X,Y)=N
                Let found := true
                Call: print(X,Y,N)
                Call: su_print()
            }
        }
    }
    for X in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  ~found {
        for Y in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  ~found ^ Fa n ~K<0> val(X,Y)=n {
            if N in n1,n2,n3,n4,n5,n6,n7,n8,n9 -> NAME  ~found ^ K<2> val(X,Y)=N {
                KB: val(X,Y)=N
                Let found := true
                Call: print(X,Y,N,N)
                Call: su_print()
            }
        }
    }
}

